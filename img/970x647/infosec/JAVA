The Font class
Instances of the Font class can be built using its constructors
or its static methods:
Font fontX = new Font ("SansSerif", 16);
Font fontY = Font.font ("Times New Roman", FontWeight.BOLD, FontPosture.ITALIC, 12);
Label label = new Label ();
label.setFont (fontY);
label.setText ("Hello");
Fonts are in javafx.scene.text.Font.
To use images import
javafx.scene.image.Image.
To display an image we use the ImageView class
To load an image:
Image img1 = new Image ("file:C:\\slides\\banyantree.jpg");
ImageView imgv1 = new ImageView (img1);
Pane - base class for layout panes, contains getChildren () method
StackPane - Places nodes on top of each other in the center of the pane
FlowPane - Places nodes row-wise/columnwise (Orientation.HORIZONTAL, Orientation.VERTICAL)
Constructors- (), (hgap, vgap), (Orientation), (Orientation, hgap, vgap)
pane.setAlignment (Pos.LEFT is default, use Pos.CENTER); 
//the overall alignment of content in this pane
//resize the pane, it stays in center.
pane.setHgap (double), setVgap (double) //gap between nodes 
setPadding (new Insets (t, r, b, l)) //creates a border
Insets and Pos constants are in javafx.geometry
add (node), addAll (node1, node2, etc), remove (node), removeAll (node1, node2, etc)
You can add a node to a pane only once!
GridPane - Places nodes in a 2-D grid
GridPane pane = new GridPane (); //do not supply dimensions here
pane.setAlignment (Pos.CENTER);
pane.setPadding (new Insets (11.1, 12.2, 13.3, 14.4));
pane.setHgap (5.5); //horizotal spacing between columns
pane.setVgap (5.5); //vertical spacing between rows
pane.add (node, column, row) //column and row indices begin at 0
pane.add (label, 0, 0); //col = 0, row = o;
pane.add (field, 1, 0); //col = 1, row = 0
pane.add (button, 2, 1); //col = 1, row = 1
pane.add (button, 3, 2); //col = 3, row = 2
Scene = new Scene (pane);
stage.setTitle ("Grid Pane");


Example of GridPane

import javafx.application.*;
import javafx.stage.*;
import javafx.scene.*;
import javafx.scene.canvas.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.text.*;
import javafx.collections.*;
import javafx.geometry.*;
import javafx.event.*;

public class JFX extends Application
      {
         TextField tf1 = new TextField ("Col 0, Row 0"),
                   tf2 = new TextField ("Col 1, Row 0"),
                   tf3 = new TextField ("Col 0, Row 1"),
                   tf4 = new TextField ("Col 1, Row 1"),
                   tf5 = new TextField ("Col 0, Row 2"),
                   tf6 = new TextField ("Col 1, Row 2"),
                   tf7 = new TextField ("Col 0, Row 3"),
                   tf8 = new TextField ("Col 1, Row 3"),
                   tf9 = new TextField ("Col 0, Row 4"),
                   tf10 = new TextField ("Col 1, Row 4"),
                   tf11 = new TextField ("Col 0, Row 5"),
                   tf12 = new TextField ("Col 1, Row 5");
         Scene scene;
         GridPane gridPane;
         public void start (Stage stage)
            {
				stage.setTitle ("Learn");
				gridPane = new GridPane ();
				gridPane.setPadding (new Insets (10, 10, 10, 10));
				gridPane.setAlignment (Pos.CENTER);
				gridPane.setHgap (10);
				gridPane.setVgap (15);
				tf1.setAlignment (Pos.CENTER); //contents in middle
				gridPane.add (tf1, 0, 0);
				gridPane.add (tf2, 1, 0);
				gridPane.add (tf3, 0, 1);
				gridPane.add (tf4, 1, 1);
				gridPane.add (tf5, 0, 2);
				gridPane.add (tf6, 1, 2);
				gridPane.add (tf7, 0, 3);
				gridPane.add (tf8, 1, 3);
				gridPane.add (tf9, 0, 4);
				gridPane.add (tf10, 1, 4);
				gridPane.add (tf11, 0, 5);
				gridPane.add (tf12, 1, 5);
				scene = new Scene (gridPane); //try scene = new Scene (gridPane, 400, 400);
				stage.setScene (scene);
				stage.show ();
			}

      }

To remove a node from a Grid Pane, use
pane.getChildren ().remove (node)

To remove all children from a Grid Pane
use pane.getChildren ().removeAll (node1, node2, node3, etc);
stage.setScene (scene);
stage.show ();




BorderPane - Places nodes in the top, right, bottom, left and center regions
This example illustrates 5 StackPanes inside a BorderPane

import javafx.application.*;
import javafx.stage.*;
import javafx.scene.*;
import javafx.scene.canvas.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.text.*;
import javafx.collections.*;
import javafx.geometry.*;
import javafx.event.*;

public class JFX extends Application
      {
         StackPane spT = new StackPane (),
                   spR = new StackPane (),
                   spB = new StackPane (),
                   spL = new StackPane (),
                   spC = new StackPane ();
         Label top = new Label ("top"), right = new Label ("right"),
               bottom = new Label ("bottom") , left = new Label ("left"),
               center = new Label ("center");
         Scene scene;
         BorderPane borderPane;
         public void start (Stage stage)
            {
				stage.setTitle ("Learn");
				borderPane = new BorderPane ();
				borderPane.setPadding (new Insets (10, 10, 10, 10));
				top.setAlignment (Pos.CENTER); //contents in middle
				right.setAlignment (Pos.CENTER);
				bottom.setAlignment (Pos.CENTER);
				left.setAlignment (Pos.CENTER);
				center.setAlignment (Pos.CENTER);
				right.setRotate (90);
				left.setRotate (270);
				spT.getChildren ().add (top);
				spR.getChildren ().add (right);
				spB.getChildren ().add (bottom);
				spL.getChildren ().add (left);
				spC.getChildren ().add (center);
				borderPane.setTop (spT);
				borderPane.setRight (spR);
				borderPane.setBottom (spB);
				borderPane.setLeft (spL);
				borderPane.setCenter (spC);
				scene = new Scene (borderPane, 500, 500);
				stage.setScene (scene);
				stage.show ();
			}

      }

HBox - places nodes in single a horizontal row
VBox - places nodes in a single vertical column
Their instances use the getChildren () method to add nodes.
A FlowPane can flow over into multiple rows or columns.
An HBox or a VBox can't.


Exercise: Read the program below,
Complete the event handling part

/*Create a VBox, called vBox.
In vBox place four instances called hBox1, hBox2, hBox3 and hBox4;
Create 4 StackPanes sp1, sp2, s3, sp4
Create three Panes p1, p2, p3;
In hBox1 place two instances of a StackPane, sp1 and sp2;
In sp1 place a circle, in sp2 place a rectangle;
In sp3 place an ellipse; in sp4 a line;
In hBox2 place sp3 and sp4;
Create an arc in p1;
in hBox3 place p1;
in p1 place an arc
In hBox4 place 7 buttons labelled "1", "2", ... "7"
In vBox place hBox1, hBox2, hBox3 and hBox4;
Your Exercise:
When any button is clicked, the corresponding object is given a different color.*/

import javafx.application.*;
import javafx.stage.*;
import javafx.scene.*;
import javafx.scene.canvas.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.text.*;
import javafx.collections.*;
import javafx.geometry.*;
import javafx.event.*;

public class JFX extends Application
      {
		  VBox vBox = new VBox ();
		  HBox hBox1 = new HBox (),
		       hBox2 = new HBox (),
		       hBox3 = new HBox (),
		       hBox4 = new HBox ();
		  StackPane sp1 = new StackPane (),
		            sp2 = new StackPane (),
		            sp3 = new StackPane (),
		            sp4 = new StackPane ();
		  Pane p1 = new Pane ();
		  Circle circle = new Circle ();
		  Rectangle rectangle = new Rectangle ();
		  Ellipse ellipse = new Ellipse ();
		  Line line = new Line ();
		  Arc arc = new Arc ();
		  Button b1 = new Button ("1"), b2 = new Button ("2"), b3 = new Button ("3"),
		         b4 = new Button ("4"), b5 = new Button ("5"), b6 = new Button ("6"),
		         b7 = new Button ("7");
		  public void start (Stage stage)
		     {
				 circle.setRadius (30);
				 sp1.getChildren ().add (circle);
				 rectangle.setWidth (40);
				 rectangle.setHeight (30);
				 sp2.getChildren ().add (rectangle);
				 ellipse.setRadiusX (40);
				 ellipse.setRadiusY (30);
				 sp3.getChildren ().add (ellipse);
				 line.setStartX (0);
				 line.setStartY (0);
				 line.setEndX (50);
				 line.setEndY (50);
				 sp4.getChildren (). add (line);
				 arc.setCenterX (60);
				 arc.setCenterY (60);
				 arc.setRadiusX (40);
				 arc.setRadiusY (50);
				 arc.setStartAngle (30);
				 arc.setLength (45);
				 p1.getChildren ().add (arc);
				 hBox1.setSpacing (30);
				 hBox1.setMargin (sp1, new Insets (10, 10, 10, 10));
				 hBox1.setMargin (sp2, new Insets (10, 10, 10, 10));
				 hBox1.getChildren ().addAll (sp1, sp2);
				 hBox2.setSpacing (30);
				 hBox2.setMargin (sp3, new Insets (10, 10, 10, 10));
				 hBox2.setMargin (sp4, new Insets (10, 10, 10, 10));
                 hBox2.getChildren ().addAll (sp3, sp4);
                 hBox3.setSpacing (30);
                 hBox3.setMargin (p1, new Insets (10, 10, 10, 10));
                 hBox3.getChildren ().add (p1);
                 hBox4.setSpacing (30);
                 hBox4.setMargin (b1, new Insets (10, 10, 10, 10));
                 hBox4.setMargin (b2, new Insets (10, 10, 10, 10));
                 hBox4.setMargin (b3, new Insets (10, 10, 10, 10));
                 hBox4.setMargin (b4, new Insets (10, 10, 10, 10));
                 hBox4.setMargin (b5, new Insets (10, 10, 10, 10));
                 hBox4.setMargin (b6, new Insets (10, 10, 10, 10));
                 hBox4.setMargin (b7, new Insets (10, 10, 10, 10));
                 hBox4.getChildren ().addAll (b1, b2, b3, b4, b5, b6, b7);
                 vBox.setSpacing (30);
                 Pane paneForText = new Pane ();
                 Text text = new Text (40, 40, "This is JavaFX Programming");
                 paneForText.getChildren ().add (text);
                 vBox.getChildren ().addAll (hBox1, hBox2, hBox3, hBox4, paneForText);
                 Scene scene = new Scene (vBox, 600, 600);
                 stage.setScene (scene);
                 stage.show ();

			 }

      }




